// Based on SplineMesh.ExampleGrowingRoot

using UnityEngine;
using SplineMesh;

[RequireComponent(typeof(Spline))]
public class GrowingRoot : MonoBehaviour
{
    public float m_GrowthAmount { get; set; }

    [SerializeField]
    private Mesh m_Mesh;

    [SerializeField]
    private Material m_Material;

    [SerializeField]
    private Vector3 m_MeshRotation;

    [SerializeField]
    private Vector3 m_MeshScale;

    [SerializeField]
    private float m_StartScale = 1f;

    private GameObject m_Generated;
    private Spline m_Spline;
    private MeshBender m_MeshBender;

    private void OnEnable()
    {
        m_GrowthAmount = 0.01f;
        Init();
    }

    private void Init()
    {
        string generatedName = "generated by " + GetType().Name;
        Transform generatedTransform = transform.Find(generatedName);
        m_Generated = generatedTransform != null
            ? generatedTransform.gameObject
            : UOUtility.Create(generatedName, gameObject,
                typeof(MeshFilter),
                typeof(MeshRenderer),
                typeof(MeshBender));

        m_Generated.GetComponent<MeshRenderer>().material = m_Material;

        m_MeshBender = m_Generated.GetComponent<MeshBender>();
        m_Spline = GetComponent<Spline>();

        m_MeshBender.Source = SourceMesh.Build(m_Mesh).Rotate(Quaternion.Euler(m_MeshRotation)).Scale(m_MeshScale);
        m_MeshBender.Mode = MeshBender.FillingMode.StretchToInterval;
        m_MeshBender.SetInterval(m_Spline, 0, 0.01f);
    }

    private void Update()
    {
        if (m_GrowthAmount < 1f)
        {
            m_GrowthAmount = Mathf.Clamp(m_GrowthAmount, 0f, 1f);
            Contort();

            if (1 - m_GrowthAmount < 0.05f)
            {
                m_GrowthAmount = 1f;
            }
        }
    }

    private void Contort()
    {
        float nodeDistance = 0;
        int i = 0;

        foreach (SplineNode n in m_Spline.nodes)
        {
            float nodeDistanceRate = nodeDistance / m_Spline.Length;
            float nodeScale = m_StartScale * (m_GrowthAmount - nodeDistanceRate) + 0.1f;
            n.Scale = new Vector2(nodeScale, nodeScale);

            if (i < m_Spline.curves.Count)
            {
                nodeDistance += m_Spline.curves[i++].Length;
            }
        }

        if (m_Generated != null)
        {
            m_MeshBender.SetInterval(m_Spline, 0, m_Spline.Length * m_GrowthAmount);
            m_MeshBender.ComputeIfNeeded();
        }
    }
}
